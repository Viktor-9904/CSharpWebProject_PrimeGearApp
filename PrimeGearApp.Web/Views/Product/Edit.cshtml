@using PrimeGearApp.Web.ViewModels.ProductViewModels
@model EditProductViewModel

@{
    ViewData["Title"] = "Edit " + @Model.Name;
}

<h2>Edit @Model.Name</h2>

<div class="container">
    <form asp-action="Edit" enctype="multipart/form-data" method="post">
        <div class="form-group">
            <label asp-for="Name" class="control-label">Name</label>
            <input asp-for="Name" class="form-control" />
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Brand" class="control-label">Brand</label>
            <input asp-for="Brand" class="form-control" />
            <span asp-validation-for="Brand" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Description" class="control-label">Description</label>
            <textarea asp-for="Description" class="form-control" rows="4" cols="50"></textarea>
            <span asp-validation-for="Brand" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="ReleaseDate" class="control-label">Release Date</label>
            <input asp-for="ReleaseDate" class="form-control" type="date" value="" />
            <span asp-validation-for="ReleaseDate" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Price" class="control-label">Price</label>
            <input asp-for="Price" class="form-control" value="@null" />
            <span asp-validation-for="Price" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="WarrantyDurationInMonths" class="control-label">Warranty (Months)</label>
            <input asp-for="WarrantyDurationInMonths" class="form-control" value="@null" min="0" />
            <span asp-validation-for="WarrantyDurationInMonths" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="AvaibleQuantity" class="control-label">Available Quantity</label>
            <input asp-for="AvaibleQuantity" class="form-control" value="@null" min="0" />
            <span asp-validation-for="AvaibleQuantity" class="text-danger"></span>
        </div>

        <div class="form-group">
            <label asp-for="Weigth" class="control-label">Weigth</label>
            <input asp-for="Weigth" class="form-control" value="@null" type="number" />
            <span asp-validation-for="Weigth" class="text-danger"></span>
        </div>

        <br />
        <div class="form-group">
            <label asp-for="ProductImagePath" class="control-label">Product Image</label>
            <input asp-for="ProductImagePath" class="form-control-file" type="file" />
            <span asp-validation-for="ProductImagePath" class="text-danger"></span>
        </div>
        <br />

        <div class="form-group">
            <label asp-for="SelectedProductTypeId">Product Type</label>
            @Html.DropDownListFor(
                     model => model.SelectedProductTypeId,
                     new SelectList(Model.ProductTypes, "Id", "Name"),
                     "Select a Product Type",
                     new { @class = "form-control", id = "ProductTypeDropdown" })
            <span asp-validation-for="SelectedProductTypeId" class="text-danger"></span>
        </div>

        <!-- Container to dynamically load fields based on selected product type -->
        <div id="dynamicFieldsContainer"></div>


        <br />
        <button type="submit" class="btn btn-primary">Create</button>
        <a asp-action="Index" class="btn btn-secondary">Cancel</a>
    </form>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const productTypeDropdown = document.getElementById("ProductTypeDropdown");
            const dynamicFieldsContainer = document.getElementById("dynamicFieldsContainer");

            // Trigger an AJAX request to load fields when the product type is selected
            productTypeDropdown.addEventListener("change", function () {
                const selectedProductTypeId = productTypeDropdown.value;

                // Make AJAX request to fetch the dynamic fields for the selected product type
                fetch(`/Product/GetProductTypeFields?productTypeId=${selectedProductTypeId}`)
                    .then(response => response.text())
                    .then(data => {
                        // Update the dynamic fields container with the new fields
                        dynamicFieldsContainer.innerHTML = data;
                    })
                    .catch(error => {
                        console.error('Error fetching dynamic fields:', error);
                    });
            });
        });
    </script>
}
